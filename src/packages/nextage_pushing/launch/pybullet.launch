<launch>
    <!-- name of the nextage to use, useful in case of multiple robots. Every robot is gonna have its nodees/topics under a namespace with the same name. -->
    <arg name="robot_name" default="nextage"/>

    <param name="robot_description" command="$(find xacro)/xacro --inorder '$(find nextage_pushing)/urdf/nextage_pushing.urdf.xacro'"/>

    <param name="box_description" command="$(find xacro)/xacro --inorder '$(find nextage_pushing)/urdf/pushing_box.urdf.xacro'"/>

    <!-- ROS-Pybullet interface node simulator -->
    <node pkg="ros_pybullet_interface" name="ros_pybullet_interface_node" type="ros_pybullet_interface_node.py">
        <rosparam param="config" file="$(find nextage_pushing)/config/rpbi/config.yaml"/>
        <remap from="/rpbi/nextage/LARM_ft_sensor_joint/ft_sensor" to="/nextage/LARM/ft_sensor"/>
        <remap from="/rpbi/nextage/RARM_ft_sensor_joint/ft_sensor" to="/nextage/RARM/ft_sensor"/>
        <remap from="/rpbi/nextage/RARM_ft_sensor_joint/Zero" to="/nextage/RARM/zero"/>
    </node>

        <!-- center of pushing space -->
    <node pkg="tf2_ros" type="static_transform_publisher" name="ws_ref"
        args="-0.6755 -0.154 0.035 0 1 0 0 world ws_ref"/>

    <!-- center of pushing space in rpbi-->
    <node pkg="tf2_ros" type="static_transform_publisher" name="rpbi_ws_ref"
        args="-0.6755 -0.154 0.035 0 1 0 0 rpbi/world rpbi_ws_ref"/>

    <!-- Target position of the box -->
    <node pkg="tf2_ros" type="static_transform_publisher" name="box_target_position"
        args="0 0.1 0 1.57 0 0 rpbi_ws_ref box_target"/>

    <!-- Target position of the box -->
    <node pkg="tf2_ros" type="static_transform_publisher" name="rviz_visual_box"
        args="0 0 0 0 0 0 rpbi/pushing_box base_link_pushing_box"/>
    <node pkg="tf2_ros" type="static_transform_publisher" name="rpbi_world"
        args="0 0 0 0 0 0 rpbi/world world"/>

    <!-- Listens on /nextage/PositionController/command and re-publishes on rpbi/nextage/joint_states/target adapting the message type -->
    <node name="command_to_rpbi" pkg="nextage_optas" type="remap_float_array_to_joint_states.py">
        <remap from="/float_array_input" to="/nextage/streaming_controller/command"/>
        <remap from="/joint_states_output" to="/rpbi/nextage/joint_states/target"/>
    </node>

    <!-- Listens on /rpbi/nextage/joint_states and re-publishes on nextage/joint_states selecting only the controllable joints -->
    <node name="filter_joint_states" pkg="nextage_optas" type="remap_joint_states_to_joint_states.py">
        <remap from="/joint_states_input" to="/rpbi/nextage/joint_states"/>
        <remap from="/joint_states_output" to="/nextage/joint_states"/>
    </node>

    <!-- convert joint states to TF transforms for rviz, etc -->
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" output="screen">
        <remap from="/joint_states" to="/nextage/joint_states" />
    </node>

</launch>