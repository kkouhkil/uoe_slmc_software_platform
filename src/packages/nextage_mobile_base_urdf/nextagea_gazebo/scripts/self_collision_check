#! /usr/bin/env python3
# Self-collision checker for Nextage platform

import pyexotica as exo
from pyexotica.publish_trajectory import *
import signal
import sys
import rospy
import numpy as np
from pyexotica.tools import check_whether_trajectory_is_collision_free_by_subsampling, get_colliding_links
from trajectory_msgs.msg import JointTrajectory
from sensor_msgs.msg import JointState

class SelfCollisionCheck:
    '''Self-collision checker for the Nextage platform. Node sits in front of trajectory controllers and filters
    out potentially harmful trajectories that may cause self-collisions'''

    def __init__(self, mode, controller_type):
        # Initial setup and sub/pub to nodes
        self.controller_type = controller_type
        self.input_traj = rospy.Subscriber(rospy.resolve_name("~traj_input"), JointTrajectory, self.input_callback, queue_size=1)
        self.output_traj = rospy.Publisher(rospy.resolve_name("~traj_output"), JointTrajectory, queue_size=1)
        self.arm_info = rospy.Subscriber(rospy.resolve_name("~joint_state"), JointState, self.arm_callback, queue_size=1)
        self.names = ['LARM_JOINT0', 'LARM_JOINT1', 'LARM_JOINT2', 'LARM_JOINT3', 'LARM_JOINT4', 'LARM_JOINT5', 'RARM_JOINT0', 'RARM_JOINT1', 'RARM_JOINT2', 'RARM_JOINT3', 'RARM_JOINT4', 'RARM_JOINT5']

        # Setup EXOTica scene with corresponding JointGroup
        init = exo.Initializers.SceneInitializer()
        init[1]['JointGroup'] = str(self.controller_type)
        init[1]['URDF'] = '{nextagea_description}/urdf/nextagea.urdf'
        init[1]['SRDF'] = '{nextagea_moveit_config}/config/nextagea.srdf'
        init[1]['AlwaysUpdateCollisionScene'] = True
        init[1]['CollisionScene'] = 'CollisionSceneFCLLatest'
        self.scene = exo.Setup.create_scene(init)

        self.mode = mode
        self.check_trajectory = False
        self.rate = rospy.Rate(10)

    def input_callback(self, data):
        # If a trajectory is not currently being processed, get data and check
        if self.check_trajectory == False:
            self.check_trajectory = True
            self.trajectory_message = data
        # Else warn that the trajectory is being ignored
        else:
            rospy.logwarn("Trajectory currently being processed, new trajectory is being ignored!")

    def arm_callback(self, data):
        # Get current joint states for joint group
        joint_states = data.position
        if rospy.resolve_name("~traj_input") == "/collision_botharms_controller/command":
            self.arm_pos = joint_states[-12:]
        elif rospy.resolve_name("~traj_input") == "/collision_rarm_controller/command":
            self.arm_pos = joint_states[-6:]
        else:
            self.arm_pos = joint_states[3:9]


    def spin(self):
        while not rospy.is_shutdown():
            try:
                if self.check_trajectory:

                    # Find robot's current state
                    current_arms = list(self.arm_pos)

                    # Update model with current joint positions
                    joint_dict = {name : current_arms[i] for i, name in enumerate(self.names)}
                    self.scene.set_model_state_map(joint_dict)

                    # Strip JointTrajectory down to be in EXOTica solution form
                    list_traj = [current_arms]
                    for i in range(0, len(self.trajectory_message.points)):
                        list_traj.append(list(self.trajectory_message.points[i].positions))
                    exotica_traj = np.array([np.array(x) for x in list_traj])

                    traj_check = check_whether_trajectory_is_collision_free_by_subsampling(self.scene, exotica_traj)

                    if traj_check:
                        # Pass through trajectory
                        self.output_traj.publish(self.trajectory_message)
                    else:
                        message = "Self-collision detected on following links:\n"
                        if self.mode == 'warn':
                            # Print warning, but also pass through trajectory
                            rospy.logwarn(message + str("\n".join(["%s - %s: %s" % collision for collision in get_colliding_links(self.scene)])))
                            self.output_traj.publish(self.trajectory_message)
                        elif self.mode == 'error':
                            # Print error, don't pass through trajectory
                            rospy.logerr(message + str("\n".join(["%s - %s: %s" % collision for collision in get_colliding_links(self.scene)])))
                            get_colliding_links(self.scene)
                    
                    self.check_trajectory = False

            except IndexError:
                rospy.logerr("Incorrect trajectory size!")
                self.check_trajectory = False

            self.rate.sleep()


def main(args):

    # Get controller_type and mode parameters
    valid_mode = ["warn", "error"]
    valid_type = ["botharms", "rarm", "larm"]

    MODE = rospy.get_param("/self_collision_check/collision_mode")
    CONTROLLER_TYPE = rospy.get_param("/self_collision_check/controller_type")
    if MODE not in valid_mode:
        print("Detected self_collision_check mode: " + MODE)
        print("Invalid collision mode! Use only the following: " + str(valid_mode))
        exit(1)
    if CONTROLLER_TYPE not in valid_type:
        print("Detected self_collision_check controller type: " + CONTROLLER_TYPE)
        print("Invalid controller type! Use only the following: " + str(valid_type))
        exit(1)  

    rospy.init_node('self_collision_check')
    col = SelfCollisionCheck(MODE, CONTROLLER_TYPE)
    try:
        col.spin()
    except KeyboardInterrupt:
        print("Shutting down")

if __name__ == '__main__':
    main(sys.argv)